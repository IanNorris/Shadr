<SHIFT_LEFT> ::= '<<'
<SHIFT_RIGHT> ::= '>>'
<COMPARISON_LESS_THAN> ::= '<'
<COMPARISON_GREATER_THAN> ::= '>'
<COMPARISON_LESS_EQUAL_THAN> ::= '<='
<COMPARISON_GREATER_EQUAL_THAN> ::= '>='
<BITWISE_OR> ::= '|'
<BITWISE_AND> ::= '&'
<BITWISE_LAZY_OR> ::= '||'
<BITWISE_LAZY_AND> ::= '&&'
<OPERATOR_PLUS> ::= '+'
<OPERATOR_MINUS> ::= '-'
<OPERATOR_DIVIDE> ::= '/'
<OPERATOR_MULTIPLY> ::= '*'
<OPERATOR_MODULO> ::= '%'
<TOKEN_INCREMENT> ::= '++'
<TOKEN_DECREMENT> ::= '--'
<TOKEN_EQUAL> ::= '=='
<TOKEN_NOT_EQUAL> ::= '!='

<TOKEN_IF> ::= 'if'
<TOKEN_ELSE> ::= 'else'
<TOKEN_DO> ::= 'do'
<TOKEN_WHILE> ::= 'while'
<TOKEN_BRACE_OPEN> ::= '{'
<TOKEN_BRACE_CLOSE> ::= '}'
<TOKEN_PAREN_OPEN> ::= '('
<TOKEN_PAREN_CLOSE> ::= ')'
<TOKEN_SQUARE_OPEN> ::= '['
<TOKEN_SQUARE_CLOSE> ::= ']'
<TOKEN_FOR> ::= 'for'
<TOKEN_DOT> ::= '.'
<TOKEN_NOT> ::= '!'
<TOKEN_EQUALS> ::= '='
<SEMI_COLON> ::= ';'
<TOKEN_COLON> ::= ':'
<TOKEN_RETURN> ::= 'return'

<TOKEN_CONST> ::= 'const'
<TOKEN_STRUCT> ::= 'struct'
<TOKEN_CBUFFER> ::= 'cbuffer'
<TOKEN_SAMPLER> ::= 'sampler'
<TOKEN_INCLUDE> ::= 'include'
<TOKEN_BUFFER> ::= 'Buffer'

<TOKEN_FEATURE> ::= 'feature'
<TOKEN_WEAK_ALIAS> ::= 'weakAlias'
<STRICT_WEAK_ALIAS> ::= 'strictAlias'

<SWIZZLE_COLOUR_COMPONENT> ::= [rgba]
<SWIZZLE_POSITION_COMPONENT> ::= [xyzw]
<SWIZZLE_COLOUR> ::= <SWIZZLE_COLOUR_COMPONENT><SWIZZLE_COLOUR_COMPONENT>?<SWIZZLE_COLOUR_COMPONENT>?<SWIZZLE_COLOUR_COMPONENT>?
<SWIZZLE_POSITION> ::= <SWIZZLE_POSITION_COMPONENT><SWIZZLE_POSITION_COMPONENT>?<SWIZZLE_POSITION_COMPONENT>?<SWIZZLE_POSITION_COMPONENT>?
<SWIZZLE> ::= <SWIZZLE_COLOUR> | <SWIZZLE_POSITION>
<TYPE> ::= <IDENTIFIER>
<RETURN_TYPE> ::= <TYPE> | <TYPE_VOID>
<PRECISION_HALF> ::= 'half'
<PRECISION_FULL> ::= 'full'
<TOKEN_UNORM> ::= 'unorm'
<TOKEN_SNORM> ::= 'snorm'
<REFERENCE> ::= '&'

<MODIFIER> ::= <PRECISION_HALF> | <PRECISION_FULL> | <TOKEN_SNORM>

<WHITESPACE> ::= [\n\r\t ]*

<IDENTIFIER> ::= [A-Za-z_][A-Za-z_0-9]*

<INTEGER> ::= <OPERATOR_MINUS>?[0-9]+

<FLOAT_TERMINATOR> ::= f

<FLOAT> ::= INTEGER?.[0-9]* FLOAT_TERMINATOR?

<BINARY_OPERATOR> ::= <SHIFT_LEFT> 
					| <SHIFT_RIGHT> 
					| <BITWISE_OR> 
					| <BITWISE_AND> 
					| <BITWISE_LAZY_OR> 
					| <BITWISE_LAZY_AND> 
					| <OPERATOR_PLUS> 
					| <OPERATOR_MINUS> 
					| <OPERATOR_DIVIDE> 
					| <OPERATOR_MULTIPLY> 
					| <OPERATOR_MODULO> 
					| <COMPARISON_LESS_THAN> 
					| <COMPARISON_GREATER_THAN> 
					| <COMPARISON_LESS_EQUAL_THAN> 
					| <COMPARISON_GREATER_EQUAL_THAN>

<FUNCTION_PARAMETER_SECONDARY> ::= ',' <SIMPLE_EXPRESSION>

<FUNCTION_EXPRESSION> ::= <IDENTIFIER> <TOKEN_PAREN_OPEN> <SIMPLE_EXPRESSION> <FUNCTION_PARAMETER_SECONDARY>* <TOKEN_PAREN_CLOSE>

<BINARY_EXPRESSION> ::= <EXPRESSION> <BINARY_OPERATOR> <EXPRESSION>
<UNARY_EXPRESSION> ::= 		(<TOKEN_NOT> <EXPRESSION>)
						|	(<TOKEN_INCREMENT> <EXPRESSION>)
						|	(<TOKEN_DECREMENT> <EXPRESSION>)
						|	(<EXPRESSION> <TOKEN_INCREMENT>)
						|	(<EXPRESSION> <TOKEN_DECREMENT>)

<SIMPLE_BINARY_EXPRESSION> ::= <SIMPLE_EXPRESSION> <BINARY_OPERATOR> <SIMPLE_EXPRESSION>
<SIMPLE_UNARY_EXPRESSION> ::= 	(<TOKEN_NOT> <SIMPLE_EXPRESSION>)
							|	(<TOKEN_INCREMENT> <SIMPLE_EXPRESSION>)
							|	(<TOKEN_DECREMENT> <SIMPLE_EXPRESSION>)
							|	(<SIMPLE_EXPRESSION> <TOKEN_INCREMENT>)
							|	(<SIMPLE_EXPRESSION> <TOKEN_DECREMENT>)

<COMPILE_TIME_BINARY_EXPRESSION> ::= <COMPILE_TIME_EXPRESSION> <BINARY_OPERATOR> <COMPILE_TIME_EXPRESSION>
<COMPILE_TIME_UNARY_EXPRESSION> ::=  (<TOKEN_NOT> <COMPILE_TIME_EXPRESSION>)
								|	(<TOKEN_INCREMENT> <COMPILE_TIME_EXPRESSION>)
								|	(<TOKEN_DECREMENT> <COMPILE_TIME_EXPRESSION>)
								|	(<COMPILE_TIME_EXPRESSION> <TOKEN_INCREMENT>)
								|	(<COMPILE_TIME_EXPRESSION> <TOKEN_DECREMENT>)

<LVALUE> ::= <SWIZZLED_IDENTIFIER> | <IDENTIFIER>

<ASSIGNMENT> ::= <LVALUE> <TOKEN_EQUALS> <EXPRESSION>
<SIMPLE_ASSIGNMENT> ::= <LVALUE> <TOKEN_EQUALS> <SIMPLE_EXPRESSION>

<ATTRIBUTE> ::=

<ATTRIBUTE_SECONDARY> ::= ',' <ATTRIBUTE>

<SEMANTIC> ::= <IDENTIFIER> (<TOKEN_PAREN_OPEN> <IDENTIFIER> <TOKEN_PAREN_CLOSE>)

<ATTRIBUTE_LIST> ::= <TOKEN_SQUARE_OPEN> <ATTRIBUTE> <ATTRIBUTE_SECONDARY>* <TOKEN_SQUARE_CLOSE>

<ARRAY_ASSIGNMENT_VALUE> ::= <SIMPLE_EXPRESSION> | <ARRAY_ASSIGNMENT>
<ARRAY_ASSIGNMENT_VALUE_SECONDARY> ::= ',' <ARRAY_ASSIGNMENT_VALUE>
<ARRAY_ASSIGNMENT> ::= <TOKEN_BRACE_OPEN> <ARRAY_ASSIGNMENT> <ARRAY_ASSIGNMENT_VALUE_SECONDARY> <TOKEN_BRACE_CLOSE>

<DECLARE_BUFFER_VARIABLE> ::= <ATTRIBUTE_LIST>? <TOKEN_CONST>? <MODIFIER>* <TYPE> ( <TOKEN_SQUARE_OPEN> (<IDENTIFIER>|<INTEGER>)? <TOKEN_SQUARE_CLOSE> )* <REFERENCE>? <IDENTIFIER>

<DECLARE_VARIABLE> ::= <ATTRIBUTE_LIST>? <TOKEN_CONST>? <MODIFIER>* <TYPE> ( <TOKEN_SQUARE_OPEN> (<IDENTIFIER>|<INTEGER>)? <TOKEN_SQUARE_CLOSE> )* <REFERENCE>? <IDENTIFIER>
<DECLARE_VARIABLE_WITH_ASSIGNMENT> ::= <DECLARE_VARIABLE> <TOKEN_EQUALS> ( <EXPRESSION> | <ARRAY_ASSIGNMENT> )
<DECLARE_VARIABLE_WITH_OPTIONAL_ASSIGNMENT> ::= <DECLARE_VARIABLE> (<TOKEN_EQUALS> <EXPRESSION>)?
<DECLARE_VARIABLE_WITH_SEMANTIC> ::= <DECLARE_VARIABLE> <TOKEN_COLON> <SEMANTIC>
<DECLARE_VARIABLE_WITH_OPTIONAL_SEMANTIC> ::= <DECLARE_VARIABLE> (<TOKEN_COLON> <SEMANTIC>)?

<FEATURE_EXPRESSION> ::= <TOKEN_FEATURE> <TOKEN_PAREN_OPEN> <EXPRESSION> <TOKEN_PAREN_CLOSE>

<COMPILE_TIME_EXPRESSION> ::=	<COMPILE_TIME_BINARY_EXPRESSION>
							| 	<COMPILE_TIME_UNARY_EXPRESSION>
							| 	<TOKEN_PAREN_OPEN> <COMPILE_TIME_EXPRESSION> <TOKEN_PAREN_CLOSE>
							|	<FLOAT>
							|	<INTEGER>
							|	<IDENTIFIER>

<SIMPLE_EXPRESSION> ::=		<SIMPLE_ASSIGNMENT>
						|	<SIMPLE_BINARY_EXPRESSION>
						| 	<SIMPLE_UNARY_EXPRESSION>
						| 	<TOKEN_PAREN_OPEN> <SIMPLE_EXPRESSION> <TOKEN_PAREN_CLOSE>
						|	<FUNCTION_EXPRESSION>
						|	<LVALUE>
						|	<FLOAT>
						|	<INTEGER>
						|	<IDENTIFIER>

<EXPRESSION> ::= 	<DECLARE_VARIABLE>
				|	<ASSIGNMENT>
				|	<BINARY_EXPRESSION>
				| 	<UNARY_EXPRESSION>
				| 	<TOKEN_PAREN_OPEN> <EXPRESSION> <TOKEN_PAREN_CLOSE>
				|	<FUNCTION_EXPRESSION>
				|	<LVALUE>
				|	<FLOAT>
				|	<INTEGER>
				|	<IDENTIFIER>
			
<SWIZZLED_IDENTIFIER> ::= <IDENTIFIER> <TOKEN_DOT> <SWIZZLE>

<EXPRESSION_PAREN> ::= <TOKEN_PAREN_OPEN> <EXPRESSION> <TOKEN_PAREN_CLOSE>

<STATEMENT_IF> ::= 	<ATTRIBUTE_LIST> <TOKEN_IF> <EXPRESSION_PAREN>
					<STATEMENT>
					(<TOKEN_ELSE> <STATEMENT>)?
				
<EXPRESSION_ASSIGN> ::= <IDENTIFIER> <TOKEN_EQUALS> <EXPRESSION>
				
<STATEMENT_FOR> ::= <ATTRIBUTE_LIST> <TOKEN_FOR> <TOKEN_PAREN_OPEN> <EXPRESSION> <SEMI_COLON> <EXPRESSION> <SEMI_COLON> <EXPRESSION> <TOKEN_PAREN_CLOSE> <STATEMENT>

<STATEMENT_DO> ::= <ATTRIBUTE_LIST> <TOKEN_DO> <STATEMENT> <TOKEN_WHILE> <EXPRESSION_PAREN> <SEMI_COLON>

<STATEMENT_WHILE> ::= <ATTRIBUTE_LIST> <TOKEN_WHILE> <EXPRESSION_PAREN> <STATEMENT>

<STATEMENT_EXPRESSION> ::= <EXPRESSION> <SEMI_COLON>

<STATEMENT_BLOCK> ::= <ATTRIBUTE_LIST> <TOKEN_BRACE_OPEN> <STATEMENT>* <TOKEN_BRACE_CLOSE>

<STATEMENT_RETURN> :: <TOKEN_RETURN> <SIMPLE_EXPRESSION> <SEMI_COLON>

<STATEMENT> ::=		<STATEMENT_BLOCK>
				|	<STATEMENT_RETURN>
				|	<STATEMENT_EXPRESSION>
				|	<STATEMENT_IF>
				|	<STATEMENT_FOR>
				|	<STATEMENT_DO>
				|	<STATEMENT_WHILE>

<FUNCTION_PARAMETER> ::= <DECLARE_VARIABLE_WITH_OR_WITHOUT_SEMANTIC>
<FUNCTION_PARAMETER_SECONDARY> ::= ',' <FUNCTION_PARAMETER>

<FUNCTION_PARAMETERS> ::= <FUNCTION_PARAMETER> <FUNCTION_PARAMETER_SECONDARY>*

<FUNCTION> ::= <ATTRIBUTE_LIST> <MODIFIER>* <RETURN_TYPE> <IDENTIFIER> <TOKEN_PAREN_OPEN> ( <FUNCTION_PARAMETERS> | <TYPE_VOID> ) <TOKEN_PAREN_CLOSE> <STATEMENT_BLOCK>

<STRUCT_DEFINITION> ::= <TOKEN_STRUCT> <IDENTIFIER> <TOKEN_BRACE_OPEN>
						(<DECLARE_VARIABLE_WITH_OPTIONAL_SEMANTIC> <SEMI_COLON>)*
						<TOKEN_BRACE_CLOSE> <SEMI_COLON>
						
<CBUFFER_DEFINITION> ::= <TOKEN_CBUFFER> <IDENTIFIER> <TOKEN_BRACE_OPEN>
						<DECLARE_VARIABLE> <SEMI_COLON>)*
						<TOKEN_BRACE_CLOSE> <SEMI_COLON>
						
<SAMPLER_DEFINITION> ::= <TOKEN_SAMPLER> <IDENTIFIER> <TOKEN_BRACE_OPEN>
						<SIMPLE_ASSIGNMENT> <SEMI_COLON>)*
						<TOKEN_BRACE_CLOSE> <SEMI_COLON>

<TYPE_DEFINITION> ::= <STRUCT_DEFINITION> | <CBUFFER_DEFINITION> | <SAMPLER_DEFINITION>

<INCLUDE> ::= <TOKEN_INCLUDE> <TOKEN_PAREN_OPEN> '"' [A-Za-z0-9_\-\\\/\.] '"' <TOKEN_PAREN_CLOSE> <SEMI_COLON>

<FEATURE_DEFINE> ::= <ATTRIBUTE_LIST> <TOKEN_FEATURE> <IDENTIFIER> <IDENTIFIER>
<ALIAS> ::= <ATTRIBUTE_LIST> (<TOKEN_WEAK_ALIAS> | <TOKEN_STRICT_ALIAS>) <IDENTIFIER> <IDENTIFIER>

<GLOBAL> ::= <DECLARE_VARIABLE_WITH_ASSIGNMENT> <SEMI_COLON>

<PROGRAM_ELEMENT> ::= <INCLUDE> | <TYPE_DEFINITION> | <FUNCTION> | <DECLARE_VARIABLE_WITH_OPTIONAL_ASSIGNMENT> | <FEATURE_DEFINE> | <ALIAS> | <GLOBAL>

<PROGRAM> ::= <PROGRAM_ELEMENT>+
